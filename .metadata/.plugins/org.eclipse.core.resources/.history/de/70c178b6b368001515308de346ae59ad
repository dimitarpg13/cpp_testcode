//============================================================================
// Name        : BoostAppDevCookbook.cpp
// Author      : Dimitar Gueorguiev
// Version     :
// Copyright   : Your copyright notice
// Description : Hello World in C++, Ansi-style
//============================================================================


#include <boost/any.hpp>

#include <boost/variant.hpp>

#include <vector>
#include <string>
#include <typeinfo>
#include <algorithm>
#include <iostream>




//these typedefs and methods will be in our header
//that wraps around native SQL iface
typedef boost::any cell_t;
typedef std::vector<cell_t> db_row_t;

//this is just an example , no actual work with the database
db_row_t get_row(const char * /*query*/)
{
	// in real application 'query' parameter shall have a 'const
	// char* or 'const std::string&' type ?
	// see recipe Using a reference to string type in Chapter 7, Manipulating Strings
	// for an answer
    db_row_t row;
    row.push_back(10);
    row.push_back(10.1f);
    row.push_back(std::string("hello again"));
    return row;
}


// this is how the user will use the classes
struct db_sum : public std::unary_function<boost::any, void>
{
private:
	double & sum_;
public:
	explicit db_sum(double & sum) : sum_(sum)
	{}

	void operator() (const cell_t & value)
	{
		const std::type_info & ti =
				value.type();
		if (ti == typeid(int))
		{
			sum_ += boost::any_cast<int>(value);
		}
		else if (ti == typeid(float))
		{
			sum_ += boost::any_cast<float>(value);
		}

	}
};

// this is how code required to sum values
// we can provide no template parameter
// to boost::static_visitor<> if our visitor
// returns nothing.
struct db_sum_visitor : public boost::static_visitor<double>
{
	double operator() (int value) const
	{
		return value;
	}

	double operator() (float value) const
	{
		return value;
	}

	double operator() (const std::string & /*value*/) const
	{
		return 0.0;
	}
};

void boost_any_example()
{
	db_row_t row = get_row("Query: Give me some row please.");
	double res = 0.0;
	std::for_each(row.begin(), row.end(), db_sum(res));
	std::cout << "Sum of arithmetic types in database row is: " << res << std::endl;
};


void boost_variant_example()
{
	db_row_t row = get_row("Query: Give me some row, Please.");
	double res = 0.0;
	db_row_t::const_iterator it = row.begin(), end = row.end();
	for (; it != end; ++it)
	{
		res +=
		   boost::apply_visitor(db_sum_visitor(), *it);
	}

	std::cout << "Sum of the arithmetic types in database row is :" << res << std::endl;
};

int main() {
	std::cout << "Boost C++ Application Development Cookbook Chapter 2" << std::endl; // prints Boost C++ Application Development Cookbook


	boost_any_example();

	return 0;
}
