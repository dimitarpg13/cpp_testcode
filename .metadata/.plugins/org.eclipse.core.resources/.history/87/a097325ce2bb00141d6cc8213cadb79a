//============================================================================
// Name        : BoostAppDevCookbookCh1.cpp
// Author      : Dimitar Gueorguiev
// Version     :
// Copyright   : Your copyright notice
// Description : Hello World in C++, Ansi-style
//============================================================================



#include <boost/any.hpp>
#include <iostream>
#include <vector>
#include <string>
#include <list>

using namespace std;

// example of how to use boost::any
using boost::any_cast;
typedef list<boost::any> many;

void append_int(many & values, int value)
{
	boost::any to_append = value;
	values.push_back(to_append);
}

void append_string(many & values, const std::string & value)
{
	values.push_back(value);
}

void append_char_ptr(many & values, const char * value)
{
	values.push_back(value);
}

void append_any(many & values, const boost::any & value)
{
	values.push_back(value);
}

void append_nothing(many & values)
{
	values.push_back(boost::any());
}

bool is_any_empty(const boost::any & operand)
{
	return operand.empty();
}

bool is_int(const boost::any & operand)
{
	return operand.type() == typeid(int);
}

bool is_char_ptr(const boost::any & operand)
{
	try
	{
		any_cast<const char*>(operand);
		return true;
	}
	catch (const boost::bad_any_cast &)
	{
		return false;
	}
}

bool is_string(const boost::any & operand)
{
	return any_cast<std::string>(&operand);
}

void count_all(many & values, std::ostream & out)
{
	out << "#empty == "
		<< std::count_if(values.begin(), values.end(), is_any_empty) << std::endl;
    out << "#int == "
    	<< std::count_if(values.begin(), values.end(), is_int) << std::endl;
    out << "#const char * == "
    	<<

}

int main() {
	cout << "Boost C++ Application Dev Cookbook Chapter 1" << endl; // prints Boost C++ Application Dev Cookbook Chapter 1
    std::vector<boost::any> some_values;

	return 0;
}
