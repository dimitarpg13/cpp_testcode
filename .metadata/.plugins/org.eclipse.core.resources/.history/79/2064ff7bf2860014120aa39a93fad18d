//============================================================================
// Name        : declTypeExample.cpp
// Author      : Dimitar Gueorguiev
// Version     :
// Copyright   : Your copyright notice
// Description : Hello World in C++, Ansi-style
//============================================================================

#include <iostream>
#include <typeinfo>

using namespace std;

struct A {
	double x;
};

const A* a = new A{0};

decltype( a->x ) x3 = 2.0;
decltype ( ( a->x )) x4 = x3;

template < class T , class U >
auto add(T t, U u) -> decltype(t + u);  // return type depends on the template parameters

int main() {
	cout << "decltype example" << endl; // prints decltype example
	cout << "x3 = " << x3 << ", typeid(x3) = " << typeid(x3).name() << endl;
	cout << "x4 = " << x4 << ", typeid(x4) = " << typeid(x4).name() << endl;
	int i = 33;
	decltype(i) j = i*2;

	cout << "i= " << i << ", "
		 << "j= " << j << '\n';

	auto f = [](int a, int b) -> int { return a*b; };




	return 0;
}
